/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baina.importer.search.service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Meta implements org.apache.thrift.TBase<Meta, Meta._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Meta");

  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("song_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALBUM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("album_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ARTIST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("artist_name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetaTupleSchemeFactory());
  }

  public int song_id; // required
  public String name; // required
  public String album_name; // required
  public String artist_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SONG_ID((short)1, "song_id"),
    NAME((short)2, "name"),
    ALBUM_NAME((short)3, "album_name"),
    ARTIST_NAME((short)4, "artist_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SONG_ID
          return SONG_ID;
        case 2: // NAME
          return NAME;
        case 3: // ALBUM_NAME
          return ALBUM_NAME;
        case 4: // ARTIST_NAME
          return ARTIST_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SONG_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("song_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM_NAME, new org.apache.thrift.meta_data.FieldMetaData("album_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTIST_NAME, new org.apache.thrift.meta_data.FieldMetaData("artist_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Meta.class, metaDataMap);
  }

  public Meta() {
  }

  public Meta(
    int song_id,
    String name,
    String album_name,
    String artist_name)
  {
    this();
    this.song_id = song_id;
    setSong_idIsSet(true);
    this.name = name;
    this.album_name = album_name;
    this.artist_name = artist_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Meta(Meta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.song_id = other.song_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAlbum_name()) {
      this.album_name = other.album_name;
    }
    if (other.isSetArtist_name()) {
      this.artist_name = other.artist_name;
    }
  }

  public Meta deepCopy() {
    return new Meta(this);
  }

  @Override
  public void clear() {
    setSong_idIsSet(false);
    this.song_id = 0;
    this.name = null;
    this.album_name = null;
    this.artist_name = null;
  }

  public int getSong_id() {
    return this.song_id;
  }

  public Meta setSong_id(int song_id) {
    this.song_id = song_id;
    setSong_idIsSet(true);
    return this;
  }

  public void unsetSong_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONG_ID_ISSET_ID);
  }

  /** Returns true if field song_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSong_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SONG_ID_ISSET_ID);
  }

  public void setSong_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONG_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Meta setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAlbum_name() {
    return this.album_name;
  }

  public Meta setAlbum_name(String album_name) {
    this.album_name = album_name;
    return this;
  }

  public void unsetAlbum_name() {
    this.album_name = null;
  }

  /** Returns true if field album_name is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbum_name() {
    return this.album_name != null;
  }

  public void setAlbum_nameIsSet(boolean value) {
    if (!value) {
      this.album_name = null;
    }
  }

  public String getArtist_name() {
    return this.artist_name;
  }

  public Meta setArtist_name(String artist_name) {
    this.artist_name = artist_name;
    return this;
  }

  public void unsetArtist_name() {
    this.artist_name = null;
  }

  /** Returns true if field artist_name is set (has been assigned a value) and false otherwise */
  public boolean isSetArtist_name() {
    return this.artist_name != null;
  }

  public void setArtist_nameIsSet(boolean value) {
    if (!value) {
      this.artist_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SONG_ID:
      if (value == null) {
        unsetSong_id();
      } else {
        setSong_id((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ALBUM_NAME:
      if (value == null) {
        unsetAlbum_name();
      } else {
        setAlbum_name((String)value);
      }
      break;

    case ARTIST_NAME:
      if (value == null) {
        unsetArtist_name();
      } else {
        setArtist_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SONG_ID:
      return Integer.valueOf(getSong_id());

    case NAME:
      return getName();

    case ALBUM_NAME:
      return getAlbum_name();

    case ARTIST_NAME:
      return getArtist_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SONG_ID:
      return isSetSong_id();
    case NAME:
      return isSetName();
    case ALBUM_NAME:
      return isSetAlbum_name();
    case ARTIST_NAME:
      return isSetArtist_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Meta)
      return this.equals((Meta)that);
    return false;
  }

  public boolean equals(Meta that) {
    if (that == null)
      return false;

    boolean this_present_song_id = true;
    boolean that_present_song_id = true;
    if (this_present_song_id || that_present_song_id) {
      if (!(this_present_song_id && that_present_song_id))
        return false;
      if (this.song_id != that.song_id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_album_name = true && this.isSetAlbum_name();
    boolean that_present_album_name = true && that.isSetAlbum_name();
    if (this_present_album_name || that_present_album_name) {
      if (!(this_present_album_name && that_present_album_name))
        return false;
      if (!this.album_name.equals(that.album_name))
        return false;
    }

    boolean this_present_artist_name = true && this.isSetArtist_name();
    boolean that_present_artist_name = true && that.isSetArtist_name();
    if (this_present_artist_name || that_present_artist_name) {
      if (!(this_present_artist_name && that_present_artist_name))
        return false;
      if (!this.artist_name.equals(that.artist_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Meta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Meta typedOther = (Meta)other;

    lastComparison = Boolean.valueOf(isSetSong_id()).compareTo(typedOther.isSetSong_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSong_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.song_id, typedOther.song_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbum_name()).compareTo(typedOther.isSetAlbum_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbum_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.album_name, typedOther.album_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArtist_name()).compareTo(typedOther.isSetArtist_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtist_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artist_name, typedOther.artist_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Meta(");
    boolean first = true;

    sb.append("song_id:");
    sb.append(this.song_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("album_name:");
    if (this.album_name == null) {
      sb.append("null");
    } else {
      sb.append(this.album_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("artist_name:");
    if (this.artist_name == null) {
      sb.append("null");
    } else {
      sb.append(this.artist_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetaStandardSchemeFactory implements SchemeFactory {
    public MetaStandardScheme getScheme() {
      return new MetaStandardScheme();
    }
  }

  private static class MetaStandardScheme extends StandardScheme<Meta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Meta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.song_id = iprot.readI32();
              struct.setSong_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALBUM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.album_name = iprot.readString();
              struct.setAlbum_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARTIST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.artist_name = iprot.readString();
              struct.setArtist_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Meta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
      oprot.writeI32(struct.song_id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.album_name != null) {
        oprot.writeFieldBegin(ALBUM_NAME_FIELD_DESC);
        oprot.writeString(struct.album_name);
        oprot.writeFieldEnd();
      }
      if (struct.artist_name != null) {
        oprot.writeFieldBegin(ARTIST_NAME_FIELD_DESC);
        oprot.writeString(struct.artist_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetaTupleSchemeFactory implements SchemeFactory {
    public MetaTupleScheme getScheme() {
      return new MetaTupleScheme();
    }
  }

  private static class MetaTupleScheme extends TupleScheme<Meta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Meta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSong_id()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetAlbum_name()) {
        optionals.set(2);
      }
      if (struct.isSetArtist_name()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSong_id()) {
        oprot.writeI32(struct.song_id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAlbum_name()) {
        oprot.writeString(struct.album_name);
      }
      if (struct.isSetArtist_name()) {
        oprot.writeString(struct.artist_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Meta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.song_id = iprot.readI32();
        struct.setSong_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.album_name = iprot.readString();
        struct.setAlbum_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.artist_name = iprot.readString();
        struct.setArtist_nameIsSet(true);
      }
    }
  }

}

